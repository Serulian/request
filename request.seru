from @core import Promise, SimpleError

from webidl`xhr` import XMLHttpRequest

/**
 * HttpError represents a request due to a non-2XX error.
 */
class HttpError {
	var response Response

	property Message string {
		get {
			return `Got non-OK response: ${this.response.StatusCode}: ${this.response.StatusText}`
		}
	}
}

/**
 * RequestError represents an error in the request being made.
 */
class RequestError {
	property Message string {
		get {
			return 'An error occurred when constructing the request'
		}
	}
}

/**
 * responseData represents the data of response to an XHR request.
 */
struct responseData {
	StatusCode int
	StatusText string
	Text string
}

/**
 * Response represents a response to an XHR request.
 */
type Response : responseData {
	/**
	 * StatusCode holds the returned HTTP status code.
	 */
	property StatusCode int {
		get { return responseData(this).StatusCode }
	}

	/**
	 * StatusText holds the returned HTTP status text.
	 */
	property StatusText string {
		get { return responseData(this).StatusText }
	}

	/**
	 * Text holds the returned body text, if any.
	 */
	property Text string {
		get { return responseData(this).Text }
	}

	/**
	 * RejectOnFailure ensures that the status code is in the 2XX family. If not, rejects
	 * with an HttpError.
	 */
	function RejectOnFailure() Response {
		if this.StatusCode / 100 != 2 {
			reject HttpError{response: this}
		}
		return this
	}
}

/**
 * Get executes a GET on the given URL.
 */
function Get(url string) Response {
	return Request.For('GET', url).Execute()
}

/**
 * Post executes a POST on the given URL, with the given body.
 */
function Post(url string, body string) Response {
	return Request.For('POST', url).WithBody(body).Execute()
}

/**
 * Put executes a PUT on the given URL, with the given body.
 */
function Put(url string, body string) Response {
	return Request.For('PUT', url).WithBody(body).Execute()
}

/**
 * Patch executes a PATCH on the given URL, with the given body.
 */
function Patch(url string, body string) Response {
	return Request.For('PATCH', url).WithBody(body).Execute()
}

/**
 * Delete executes a DELETE on the given URL.
 */
function Delete(url string) Response {
	return Request.For('DELETE', url).Execute()
}

/**
 * GetURLContents performs an XHR load of the specified URL, returning the contents of
 * the body or raising an HttpError if the request was not successful.
 */
function GetURLContents(url string) string {
	return Get(url).RejectOnFailure().Text
}

/**
 * Request represents a single request via XHR to an external URL.
 */
class Request {
	var method string
	var url string
	var body string?

	/**
	 * For creates a new request for the given method and url.
	 */
	constructor For(method string, url string) {
		return Request{method: method, url: url}
	}

	/**
	 * WithBody sents the body that will be sent along with this request.
	 */
	function WithBody(body string) Request {
		this.body = body
		return this
	}

	/**
	 * ExecuteAndReturn executes the request, returning a promise that will
	 * be fulfilled once the request complete.
	 */
	function ExecuteAndReturn() Promise<Response> {
		return Promise<Response>.Execute(function(resolve function<void>(Response), rejectNow function<void>(error)) {
			var xhr = XMLHttpRequest.new()
			xhr.open(this.method, this.url)

			xhr.addEventListener('load', function() {
				if int(xhr.readyState) == 4 {
					resolve(Response(responseData{
						StatusCode: int(xhr.status),
						StatusText: string(xhr.statusText),
						Text: string(xhr.responseText),
					}))
				}
			})

			xhr.addEventListener('error', function() {
				rejectNow(RequestError.new())
			})

			xhr.send(&this.body)
		})
	}

	/**
	 * Execute executes the request, awaiting on its result.
	 */
	function Execute() Response {
		return <- this.ExecuteAndReturn()
	}
}
